@startuml

class McpServer {
  + createMcpServer()
  + registerTool()
}

class AnalysisService {
  - swiftParser: SwiftParser
  - parsedProjects: Map<string, CodeChunk[]>
  - chunksDir: string
  + constructor(chunksDir: string)
  + analyzeProject(projectPath: string): Promise<void>
  + getChunk(chunkId: string): Promise<any | null>
  + listFunctionsInFile(filePath: string): Promise<{ signature: string }[]>
  + getFunctionChunk(filePath: string, functionSignature: string): Promise<{ content: string } | null>
  - getSwiftFiles(projectPath: string): Promise<string[]>
  - saveChunk(chunk: CodeChunk): Promise<void>
  - loadChunk(chunkId: string): Promise<any | null>
  - toSafeFileName(name: string): string
}

class SwiftParser {
  + constructor(execFn: ExecFunction, readFileFn: ReadFileFunction)
  + parseFile(filePath: string): Promise<CodeChunk[]>
  + getFunctionContent(filePath: string, functionSignature: string): Promise<string | null>
  - getLineNumber(filePath: string, offset: number): Promise<number>
}

interface CodeChunk {
  name: string
  type: string
  signature: string
  id: string
  content: string
  startLine: number
  endLine: number
  offset: number
  length: number
  bodyOffset: number
  bodyLength: number
}

McpServer ..> AnalysisService : uses
AnalysisService ..> SwiftParser : uses
SwiftParser ..> CodeChunk : creates

@enduml
